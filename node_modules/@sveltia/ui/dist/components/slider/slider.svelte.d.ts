export default Slider;
type Slider = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<Props & Record<string, any>>): void;
};
/**
 * The equivalent of the HTML `<input type="range">` element, but it comes with the multi-thumb
 * support.
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range
 * @see https://w3c.github.io/aria/#slider
 * @see https://www.w3.org/WAI/ARIA/apg/patterns/slider/
 * @see https://www.w3.org/WAI/ARIA/apg/patterns/slider-multithumb/
 */
declare const Slider: import("svelte").Component<{
    /**
     * - Current value.
     */
    value?: number | undefined;
    /**
     * - Minimum allowed value. An alias of the `aria-valuemin` attribute.
     */
    min?: number | undefined;
    /**
     * - Maximum allowed value. An alias of the `aria-valuemax` attribute.
     */
    max?: number | undefined;
    /**
     * - `aria-label` on the slider.
     */
    sliderLabel?: string | undefined;
    /**
     * - Value list for a multi-thumb slider.
     */
    values?: [number, number] | undefined;
    /**
     * - `aria-label` on a multi-thumb slider.
     */
    sliderLabels?: [string, string] | undefined;
    /**
     * - Step option like `<input type="range">`.
     */
    step?: number | undefined;
    /**
     * - Visible labels on the slider.
     */
    optionLabels?: string[] | number[] | undefined;
    /**
     * - Make the text input container flexible.
     */
    flex?: boolean | undefined;
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to hide the widget.
     */
    hidden?: boolean | undefined;
    /**
     * - Whether to disable the widget. An alias of the `aria-disabled`
     * attribute.
     */
    disabled?: boolean | undefined;
    /**
     * - Whether to make the widget read-only. An alias of the
     * `aria-readonly` attribute.
     */
    readonly?: boolean | undefined;
    /**
     * - Whether to mark the widget invalid. An alias of the
     * `aria-invalid` attribute.
     */
    invalid?: boolean | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
    /**
     * - `change` event
     * handler.
     */
    onChange?: ((detail: {
        values?: number[];
        value?: number;
    }) => void) | undefined;
} & Record<string, any>, {}, "value">;
type Props = {
    /**
     * - Current value.
     */
    value?: number | undefined;
    /**
     * - Minimum allowed value. An alias of the `aria-valuemin` attribute.
     */
    min?: number | undefined;
    /**
     * - Maximum allowed value. An alias of the `aria-valuemax` attribute.
     */
    max?: number | undefined;
    /**
     * - `aria-label` on the slider.
     */
    sliderLabel?: string | undefined;
    /**
     * - Value list for a multi-thumb slider.
     */
    values?: [number, number] | undefined;
    /**
     * - `aria-label` on a multi-thumb slider.
     */
    sliderLabels?: [string, string] | undefined;
    /**
     * - Step option like `<input type="range">`.
     */
    step?: number | undefined;
    /**
     * - Visible labels on the slider.
     */
    optionLabels?: string[] | number[] | undefined;
    /**
     * - Make the text input container flexible.
     */
    flex?: boolean | undefined;
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to hide the widget.
     */
    hidden?: boolean | undefined;
    /**
     * - Whether to disable the widget. An alias of the `aria-disabled`
     * attribute.
     */
    disabled?: boolean | undefined;
    /**
     * - Whether to make the widget read-only. An alias of the
     * `aria-readonly` attribute.
     */
    readonly?: boolean | undefined;
    /**
     * - Whether to mark the widget invalid. An alias of the
     * `aria-invalid` attribute.
     */
    invalid?: boolean | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
    /**
     * - `change` event
     * handler.
     */
    onChange?: ((detail: {
        values?: number[];
        value?: number;
    }) => void) | undefined;
};
