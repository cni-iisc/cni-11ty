export default Toast;
type Toast = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<Props & Record<string, any>>): void;
};
/**
 * Toast/snackbar notification. Use the Popover API if possible to acquire a non-modal top layer.
 * @see https://w3c.github.io/aria/#alert
 * @see https://developer.chrome.com/blog/introducing-popover-api/
 */
declare const Toast: import("svelte").Component<{
    /**
     * - The toast ID. If updated, the timer that hides
     * the toast will be reset, meaning the same toast can be displayed for a longer period of time.
     */
    id?: string | number | undefined;
    /**
     * - Whether to show the toast.
     */
    show?: boolean | undefined;
    /**
     * - Duration to automatically hide the toast. Use `0` to hide it
     * manually from the consumer.
     */
    duration?: number | undefined;
    /**
     * - Position of the toast.
     */
    position?: import("../../typedefs").ToastPosition | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
} & Record<string, any>, {}, "show">;
type Props = {
    /**
     * - The toast ID. If updated, the timer that hides
     * the toast will be reset, meaning the same toast can be displayed for a longer period of time.
     */
    id?: string | number | undefined;
    /**
     * - Whether to show the toast.
     */
    show?: boolean | undefined;
    /**
     * - Duration to automatically hide the toast. Use `0` to hide it
     * manually from the consumer.
     */
    duration?: number | undefined;
    /**
     * - Position of the toast.
     */
    position?: import("../../typedefs").ToastPosition | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
};
