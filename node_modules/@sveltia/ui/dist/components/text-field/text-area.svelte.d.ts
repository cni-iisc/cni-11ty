export default TextArea;
type TextArea = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<KeyboardEventHandlers & MouseEventHandlers & FocusEventHandlers & DragEventHandlers & InputEventHandlers & Props & Record<string, any>>): void;
};
/**
 * A multi-line text field based on the HTML `<textarea>` element, providing the auto-resize support.
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea
 * @see https://w3c.github.io/aria/#textbox
 * @see https://css-tricks.com/the-cleanest-trick-for-autogrowing-textareas/
 */
declare const TextArea: import("svelte").Component<import("../../typedefs").KeyboardEventHandlers & import("../../typedefs").MouseEventHandlers & import("../../typedefs").FocusEventHandlers & import("../../typedefs").DragEventHandlers & import("../../typedefs").InputEventHandlers & {
    /**
     * - Input value.
     */
    value?: string | undefined;
    /**
     * - Make the text input container flexible.
     */
    flex?: boolean | undefined;
    /**
     * - The `name` attribute on the `<textarea>` element.
     */
    name?: string | undefined;
    /**
     * - Whether to automatically resize the `<textarea>` based on
     * the content.
     */
    autoResize?: boolean | undefined;
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to hide the widget.
     */
    hidden?: boolean | undefined;
    /**
     * - Whether to disable the widget. An alias of the `aria-disabled`
     * attribute.
     */
    disabled?: boolean | undefined;
    /**
     * - Whether to make the widget read-only. An alias of the
     * `aria-readonly` attribute.
     */
    readonly?: boolean | undefined;
    /**
     * - Whether to mark the widget required. An alias of the
     * `aria-required` attribute.
     */
    required?: boolean | undefined;
    /**
     * - Whether to mark the widget invalid. An alias of the
     * `aria-invalid` attribute.
     */
    invalid?: boolean | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
} & Record<string, any>, {}, "value">;
type Props = {
    /**
     * - Input value.
     */
    value?: string | undefined;
    /**
     * - Make the text input container flexible.
     */
    flex?: boolean | undefined;
    /**
     * - The `name` attribute on the `<textarea>` element.
     */
    name?: string | undefined;
    /**
     * - Whether to automatically resize the `<textarea>` based on
     * the content.
     */
    autoResize?: boolean | undefined;
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to hide the widget.
     */
    hidden?: boolean | undefined;
    /**
     * - Whether to disable the widget. An alias of the `aria-disabled`
     * attribute.
     */
    disabled?: boolean | undefined;
    /**
     * - Whether to make the widget read-only. An alias of the
     * `aria-readonly` attribute.
     */
    readonly?: boolean | undefined;
    /**
     * - Whether to mark the widget required. An alias of the
     * `aria-required` attribute.
     */
    required?: boolean | undefined;
    /**
     * - Whether to mark the widget invalid. An alias of the
     * `aria-invalid` attribute.
     */
    invalid?: boolean | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
};
