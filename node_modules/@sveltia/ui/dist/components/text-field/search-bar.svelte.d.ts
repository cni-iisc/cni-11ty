export default SearchBar;
type SearchBar = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<TextInputProps & KeyboardEventHandlers & MouseEventHandlers & FocusEventHandlers & DragEventHandlers & InputEventHandlers & Props & Record<string, any>>): void;
} & {
    focus: () => void;
};
/**
 * The equivalent of the HTML `<input type="search">` element. It comes with a magnifier icon and
 * clear button.
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search
 * @see https://w3c.github.io/aria/#search
 */
declare const SearchBar: import("svelte").Component<import("../../typedefs").TextInputProps & import("../../typedefs").KeyboardEventHandlers & import("../../typedefs").MouseEventHandlers & import("../../typedefs").FocusEventHandlers & import("../../typedefs").DragEventHandlers & import("../../typedefs").InputEventHandlers & {
    /**
     * - Input value.
     */
    value?: string | undefined;
    /**
     * - Search icon slot content.
     */
    searchIcon?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Close icon slot content.
     */
    closeIcon?: import("svelte").Snippet<[]> | undefined;
} & Record<string, any>, {
    focus: () => void;
}, "value">;
type Props = {
    /**
     * - Input value.
     */
    value?: string | undefined;
    /**
     * - Search icon slot content.
     */
    searchIcon?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Close icon slot content.
     */
    closeIcon?: import("svelte").Snippet<[]> | undefined;
};
