export default Option;
type Option = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<ButtonProps & KeyboardEventHandlers & MouseEventHandlers & FocusEventHandlers & DragEventHandlers & Props & Record<string, any>>): void;
};
/**
 * An option within the `<Listbox>` widget. The equivalent of the HTML `<option>` element.
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option
 * @see https://w3c.github.io/aria/#option
 */
declare const Option: import("svelte").Component<import("../../typedefs").ButtonProps & import("../../typedefs").KeyboardEventHandlers & import("../../typedefs").MouseEventHandlers & import("../../typedefs").FocusEventHandlers & import("../../typedefs").DragEventHandlers & {
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to select the widget. An alias of the `aria-selected`
     * attribute.
     */
    selected?: boolean | undefined;
    /**
     * - Text label displayed on the item.
     */
    label: string;
    /**
     * - The value to be searched.
     */
    searchValue?: string | undefined;
    /**
     * - Whether to wrap a long label.
     */
    wrap?: boolean | undefined;
    /**
     * - Check icon slot content.
     */
    checkIcon?: import("svelte").Snippet<[]> | undefined;
} & Record<string, any>, {}, "hidden" | "selected">;
type Props = {
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to select the widget. An alias of the `aria-selected`
     * attribute.
     */
    selected?: boolean | undefined;
    /**
     * - Text label displayed on the item.
     */
    label: string;
    /**
     * - The value to be searched.
     */
    searchValue?: string | undefined;
    /**
     * - Whether to wrap a long label.
     */
    wrap?: boolean | undefined;
    /**
     * - Check icon slot content.
     */
    checkIcon?: import("svelte").Snippet<[]> | undefined;
};
