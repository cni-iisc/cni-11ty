export default Popup;
type Popup = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<ModalProps & Props & Record<string, any>>): void;
};
/** Generic popup helper. */
declare const Popup: import("svelte").Component<import("../../typedefs").ModalProps & {
    /**
     * - The `class` attribute on the content element.
     */
    class?: string | undefined;
    /**
     * - Whether to open the popup.
     */
    open?: boolean | undefined;
    /**
     * - A reference to the anchor element that opens the popup.
     * Typically a `<button>`.
     */
    anchor?: HTMLElement | undefined;
    /**
     * - A reference to the content element.
     */
    content?: HTMLElement | undefined;
    /**
     * - Where to show the popup.
     */
    position?: import("../../typedefs").PopupPosition | undefined;
    /**
     * - The base element of
     * {@link position}. If omitted, this will be {@link anchor}.
     */
    positionBaseElement?: HTMLElement | undefined;
    /**
     * - Whether to show the popup at the center of the screen on
     * mobile/tablet and ignore the defined dropdown `position`.
     */
    touchOptimized?: boolean | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Extra slot content.
     */
    extraContent?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Custom `Open` event handler.
     */
    onOpen?: ((event: CustomEvent) => void) | undefined;
} & Record<string, any>, {}, "open" | "content">;
type Props = {
    /**
     * - The `class` attribute on the content element.
     */
    class?: string | undefined;
    /**
     * - Whether to open the popup.
     */
    open?: boolean | undefined;
    /**
     * - A reference to the anchor element that opens the popup.
     * Typically a `<button>`.
     */
    anchor?: HTMLElement | undefined;
    /**
     * - A reference to the content element.
     */
    content?: HTMLElement | undefined;
    /**
     * - Where to show the popup.
     */
    position?: import("../../typedefs").PopupPosition | undefined;
    /**
     * - The base element of
     * {@link position}. If omitted, this will be {@link anchor}.
     */
    positionBaseElement?: HTMLElement | undefined;
    /**
     * - Whether to show the popup at the center of the screen on
     * mobile/tablet and ignore the defined dropdown `position`.
     */
    touchOptimized?: boolean | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Extra slot content.
     */
    extraContent?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Custom `Open` event handler.
     */
    onOpen?: ((event: CustomEvent) => void) | undefined;
};
