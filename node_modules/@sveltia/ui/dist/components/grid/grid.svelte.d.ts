export default Grid;
type Grid = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<Props & Record<string, any>>): void;
};
/**
 * The interactive version of `<Table>`.
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table
 * @see https://w3c.github.io/aria/#grid
 */
declare const Grid: import("svelte").Component<{
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to allow selecting more than one `<GridRow>` and/or
     * `<GridCell>`. An alias of the `aria-multiselectable` attribute.
     */
    selected?: boolean | undefined;
    /**
     * - Whether to select a row by clicking on it.
     */
    clickToSelect?: boolean | undefined;
    /**
     * - A reference to the wrapper element.
     */
    element?: HTMLElement | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Custom `Change` event handler.
     */
    onChange?: ((event: CustomEvent) => void) | undefined;
} & Record<string, any>, {}, "element">;
type Props = {
    /**
     * - The `class` attribute on the wrapper element.
     */
    class?: string | undefined;
    /**
     * - Whether to allow selecting more than one `<GridRow>` and/or
     * `<GridCell>`. An alias of the `aria-multiselectable` attribute.
     */
    selected?: boolean | undefined;
    /**
     * - Whether to select a row by clicking on it.
     */
    clickToSelect?: boolean | undefined;
    /**
     * - A reference to the wrapper element.
     */
    element?: HTMLElement | undefined;
    /**
     * - Primary slot content.
     */
    children?: import("svelte").Snippet<[]> | undefined;
    /**
     * - Custom `Change` event handler.
     */
    onChange?: ((event: CustomEvent) => void) | undefined;
};
