/**
 * Implement a wrapper for the IndexedDB API, making it easier to use the client-side database with
 * auto-upgrades and convenient Promise methods.
 */
export default class IndexedDB {
    /**
     * Initialize a new `IndexedDB` instance.
     * @param {string} databaseName - Database name.
     * @param {string} storeName - Store name.
     * @param {object} [options] - Options.
     * @param {string | string[]} [options.keyPath] - Option for `createObjectStore()`.
     * @param {boolean} [options.autoIncrement] - Option for `createObjectStore()`.
     * @param {import("../typedefs").DatabaseIndex[]} [options.indexes] - Arguments for
     * `createIndex()`.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/createObjectStore
     * @see https://stackoverflow.com/questions/33852508/how-to-create-an-indexeddb-composite-key
     */
    constructor(databaseName: string, storeName: string, { keyPath, autoIncrement, indexes }?: {
        keyPath?: string | string[] | undefined;
        autoIncrement?: boolean | undefined;
        indexes?: import("../typedefs").DatabaseIndex[] | undefined;
    } | undefined);
    /**
     * Save a value with an out-of-line key.
     * @param {any} key - Key.
     * @param {any} value - Value.
     * @returns {Promise<any>} Key.
     */
    set(key: any, value: any): Promise<any>;
    /**
     * Save a value with an inline key.
     * @param {any} value - Value.
     * @returns {Promise<any>} Key.
     */
    put(value: any): Promise<any>;
    /**
     * Save multiple records.
     * @param {[any, any][]} records - Key/value pairs.
     * @returns {Promise<any>} Key.
     */
    saveEntries(records: [any, any][]): Promise<any>;
    /**
     * Retrieve a value by key.
     * @param {any} key - Key.
     * @returns {Promise<any>} Value.
     */
    get(key: any): Promise<any>;
    /**
     * Retrieve all the keys.
     * @returns {Promise<any[]>} Keys.
     */
    keys(): Promise<any[]>;
    /**
     * Retrieve all the values.
     * @returns {Promise<any[]>} Values.
     */
    values(): Promise<any[]>;
    /**
     * Retrieve all the records.
     * @returns {Promise<[any, any][]>} Key/value pairs.
     */
    entries(): Promise<[any, any][]>;
    /**
     * Find the first record that matches the condition.
     * @param {(record: any) => boolean} [callback] - A function to execute for each record.
     * @param {object} [options] - Options.
     * @param {string} [options.index] - Index.
     * @param {IDBValidKey | IDBKeyRange} [options.query] - Query option for `openCursor()`.
     * @returns {Promise<any>} Found record.
     */
    find(callback?: ((record: any) => boolean) | undefined, { index, query }?: {
        index?: string | undefined;
        query?: IDBValidKey | IDBKeyRange | undefined;
    } | undefined): Promise<any>;
    /**
     * Find the last record that matches the condition.
     * @param {(record: any) => boolean} [callback] - A function to execute for each record.
     * @param {object} [options] - Options.
     * @param {string} [options.index] - Index.
     * @param {IDBValidKey | IDBKeyRange} [options.query] - Query option for `openCursor()`.
     * @returns {Promise<any>} Found record.
     */
    findLast(callback?: ((record: any) => boolean) | undefined, { index, query }?: {
        index?: string | undefined;
        query?: IDBValidKey | IDBKeyRange | undefined;
    } | undefined): Promise<any>;
    /**
     * Find all the records that match the condition.
     * @param {(record: any) => boolean} [callback] - A function to execute for each record.
     * @param {object} [options] - Options.
     * @param {string} [options.index] - Index.
     * @param {IDBValidKey | IDBKeyRange} [options.query] - Query option for `openCursor()`.
     * @returns {Promise<any[]>} Found records.
     */
    filter(callback?: ((record: any) => boolean) | undefined, { index, query }?: {
        index?: string | undefined;
        query?: IDBValidKey | IDBKeyRange | undefined;
    } | undefined): Promise<any[]>;
    /**
     * Delete an record by key.
     * @param {any} key - Key.
     * @returns {Promise<void>} Result.
     */
    delete(key: any): Promise<void>;
    /**
     * Delete multiple records by keys.
     * @param {any[]} keys - Property keys.
     * @returns {Promise<void>} Result.
     */
    deleteEntries(keys: any[]): Promise<void>;
    /**
     * Delete all the records.
     * @returns {Promise<void>} Result.
     */
    clear(): Promise<void>;
    #private;
}
