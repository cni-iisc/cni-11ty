/**
 * Implement a wrapper for the Web Storage API. These methods are async just like the experimental
 * KV Storage and automatically parse/stringify JSON data.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Storage
 * @see https://developer.chrome.com/blog/kv-storage/
 */
export default class LocalStorage {
    /**
     * Save data.
     * @param {string} key - Storage key.
     * @param {any} value - Serializable value.
     * @throws {DOMException} When storage access is denied.
     */
    static set(key: string, value: any): Promise<void>;
    /**
     * Retrieve data by key.
     * @param {string} key - Storage key.
     * @returns {Promise<*>} Data.
     * @throws {DOMException} When storage access is denied.
     */
    static get(key: string): Promise<any>;
    /**
     * Delete data by key.
     * @param {string} key - Storage key.
     * @throws {DOMException} When storage access is denied.
     */
    static delete(key: string): Promise<void>;
    /**
     * Clear the storage.
     * @throws {DOMException} When storage access is denied.
     */
    static clear(): Promise<void>;
    /**
     * Get a list of storage keys.
     * @returns {Promise<string[]>} Keys.
     * @throws {DOMException} When storage access is denied.
     */
    static keys(): Promise<string[]>;
    /**
     * Get a list of storage values.
     * @returns {Promise<*[]>} Values.
     * @throws {DOMException} When storage access is denied.
     */
    static values(): Promise<any[]>;
    /**
     * Get a list of storage entries.
     * @returns {Promise<[string, any][]>} Entries.
     * @throws {DOMException} When storage access is denied.
     */
    static entries(): Promise<[string, any][]>;
}
