/**
 * Compare strings for natural sorting.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare
 */
export const compare: (x: string, y: string) => number;
/**
 * Escape the given string so it can be used safely for `new RegExp()`.
 * @param {string} string - Original string.
 * @returns {string} Escaped string.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping
 */
export function escapeRegExp(string: string): string;
/**
 * Check if the given string is a URL.
 * @param {string} string - String that might be a URL.
 * @returns {boolean} Result.
 */
export function isURL(string: string): boolean;
/**
 * Strip the leading and trailing slashes from the given string.
 * @param {string} string - Original string, e.g. `/foo/bar/`.
 * @returns {string} Trimmed string, e.g. `foo/bar`.
 */
export function stripSlashes(string: string): string;
/**
 * Remove all HTML tags from the given string so itâ€™s safe to use in the app.
 * @param {string} string - Original string that may include tags, e.g. `<div>Hello</div>`.
 * @returns {string} Sanitized string, e.g. `Hello`.
 */
export function stripTags(string: string): string;
/**
 * Truncate the given string.
 * @param {string} string - Original string.
 * @param {number} max - Maximum number of characters.
 * @param {object} [options] - Options.
 * @param {string} [options.ellipsis] - Character(s) to be appended if the the truncated string is
 * longer than `max`.
 * @returns {string} Truncated string.
 */
export function truncate(string: string, max: number, { ellipsis }?: {
    ellipsis?: string | undefined;
} | undefined): string;
