/**
 * Get the data URL of the given input.
 * @param {File | Blob | string} input - Input file or string.
 * @returns {Promise<string>} Base64.
 */
export function getBase64(input: File | Blob | string): Promise<string>;
/**
 * Get a regular expression that matches a blob URL.
 * @param {string} flags - Flags for `RegExp`.
 * @returns {RegExp} Regular expression.
 */
export function getBlobRegex(flags?: string): RegExp;
/**
 * Get the Base64 encoding of the given input.
 * @param {File | Blob | string} input - Input file or string.
 * @returns {Promise<string>} Data URL like `data:text/plain;base64,...`.
 */
export function getDataURL(input: File | Blob | string): Promise<string>;
/**
 * Get information about a file path.
 * @param {string} path - Path to be parsed.
 * @returns {{ dirname?: string, basename: string, filename: string, extension?: string }} Result.
 * @see https://www.php.net/manual/en/function.pathinfo.php
 */
export function getPathInfo(path: string): {
    dirname?: string;
    basename: string;
    filename: string;
    extension?: string;
};
/**
 * Whether the given MIME type is plaintext.
 * @param {string} type - MIME type.
 * @returns {boolean} Result.
 */
export function isTextFileType(type: string): boolean;
/**
 * Read the given file as plaintext. On Windows, the result may include CRLF line breaks. Convert
 * any CRLF to LF to parse entries properly.
 * @param {File | Blob} file - File.
 * @returns {Promise<string>} Content.
 */
export function readAsText(file: File | Blob): Promise<string>;
/**
 * Save the given file locally.
 * @param {File | Blob} file - File to be saved.
 * @param {string} [name] - File name. Required if the `file` param is a `Blob`.
 */
export function saveFile(file: File | Blob, name?: string | undefined): void;
/**
 * Scan local files in nested folders and return them in a flat array, sorted by name.
 * @param {DataTransfer} dataTransfer - From `drop` event.
 * @param {object} [options] - Options.
 * @param {string} [options.accept] - Accepted file types, which is the same as the `accept`
 * property for HTML `<input type="file">`.
 * @returns {Promise<File[]>} Files.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry
 */
export function scanFiles({ items }: DataTransfer, { accept }?: {
    accept?: string | undefined;
} | undefined): Promise<File[]>;
